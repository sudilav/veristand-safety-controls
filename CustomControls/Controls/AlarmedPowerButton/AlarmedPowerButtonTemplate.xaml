<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:niBooleans="clr-namespace:NationalInstruments.Controls;assembly=NationalInstruments.Controls.Booleans"
                    xmlns:coreControls="clr-namespace:NationalInstruments.Controls;assembly=NationalInstruments.Core"
                    xmlns:core="clr-namespace:NationalInstruments.Core;assembly=NationalInstruments.Core"
                    xmlns:niControls="clr-namespace:NationalInstruments.Controls;assembly=NationalInstruments.Controls"
                    xmlns:niConvertersControls="clr-namespace:NationalInstruments.Controls.Converters;assembly=NationalInstruments.Controls"
                    xmlns:SafetyCustomControls="clr-namespace:NationalInstruments.VeriStand.CustomControls">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/NationalInstruments.Controls.SkinProviders.Booleans;component/ThemeColorDefault.xaml" />
    </ResourceDictionary.MergedDictionaries>
    <niConvertersControls:ColorTableColorResolverConverter x:Key="ColorTableConverter" />
    <niConvertersControls:DynamicColorTableColorResolverConverter x:Key="DynamicColorTableConverter" />
    <Style x:Key="{x:Type SafetyCustomControls:AlarmedPowerButton}" TargetType="{x:Type SafetyCustomControls:AlarmedPowerButton}">
        <Setter Property="FrameworkElement.MinWidth" Value="10" />
        <Setter Property="FrameworkElement.MinHeight" Value="10" />
        <Setter Property="FrameworkElement.UseLayoutRounding" Value="False" />
        <Setter Property="niControls:CommonRenderProperties.ControlDesign" Value="{coreControls:ControlDesign Value=/NationalInstruments.Controls.Booleans;component/Resources/powerButton_IDE_9Grid.xml}" />
        <Setter Property="niControls:CommonRenderProperties.BackgroundImage" Value="{Binding Path=(niControls:CommonRenderProperties.ControlDesign)[BackgroundImage], RelativeSource={RelativeSource Self}}" />
        <Setter Property="niBooleans:BooleanRenderProperties.TrueImage" Value="{Binding Path=(niControls:CommonRenderProperties.ControlDesign)[TrueImage], RelativeSource={RelativeSource Self}}" />
        <Setter Property="niBooleans:BooleanRenderProperties.FalseImage" Value="{Binding Path=(niControls:CommonRenderProperties.ControlDesign)[FalseImage], RelativeSource={RelativeSource Self}}" />
        <Setter Property="core:RenderHelpers.ColorResolver" Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource ColorTableConverter}}" />
        <Setter Property="coreControls:GuidelineCollection.HorizontalGuidelines" Value="{Binding Path=(niControls:CommonRenderProperties.ControlDesign).HorizontalGuidelines, RelativeSource={RelativeSource Self}}" />
        <Setter Property="coreControls:GuidelineCollection.VerticalGuidelines" Value="{Binding Path=(niControls:CommonRenderProperties.ControlDesign).VerticalGuidelines, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate />
            </Setter.Value>
        </Setter>
        <Setter Property="coreControls:InteractiveTemplateBehavior.InteractiveTemplate">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type SafetyCustomControls:AlarmedPowerButton}">
                    <coreControls:GuidelinePanel coreControls:GuidelineCollection.HorizontalGuidelines="{Binding Path=(coreControls:GuidelineCollection.HorizontalGuidelines), RelativeSource={RelativeSource TemplatedParent}}" coreControls:GuidelineCollection.VerticalGuidelines="{Binding Path=(coreControls:GuidelineCollection.VerticalGuidelines), RelativeSource={RelativeSource TemplatedParent}}">
                        <core:NineGrid Name="Background" UseFastRectangleHitTest="False" DataSource="{Binding Path=(niControls:CommonRenderProperties.BackgroundImage), RelativeSource={RelativeSource TemplatedParent}}" coreControls:GuidelinePanel.LayoutSource="{Binding Path=(niControls:CommonRenderProperties.BackgroundImage), RelativeSource={RelativeSource TemplatedParent}}" />
                        <core:NineGrid Name="PART_TrueElement" coreControls:GuidelinePanel.LayoutSource="{TemplateBinding niBooleans:BooleanRenderProperties.TrueImage}" Visibility="Collapsed" UseFastRectangleHitTest="False" DataSource="{Binding Path=(niBooleans:BooleanRenderProperties.TrueImage), RelativeSource={RelativeSource TemplatedParent}}" />
                        <core:NineGrid Name="PART_FalseElement" coreControls:GuidelinePanel.LayoutSource="{TemplateBinding niBooleans:BooleanRenderProperties.FalseImage}" UseFastRectangleHitTest="False" DataSource="{Binding Path=(niBooleans:BooleanRenderProperties.FalseImage), RelativeSource={RelativeSource TemplatedParent}}" />
                    </coreControls:GuidelinePanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="niBooleans:BooleanButton.Value" Value="True">
                            <Setter TargetName="PART_FalseElement" Property="UIElement.Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_TrueElement" Property="UIElement.Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="core:RenderHelpers.ColorResolver" Value="{Binding ConverterParameter=MouseOver, RelativeSource={RelativeSource Self}, Converter={StaticResource DynamicColorTableConverter}}" />
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Property="core:RenderHelpers.ColorResolver" Value="{Binding ConverterParameter=Pressed, RelativeSource={RelativeSource Self}, Converter={StaticResource DynamicColorTableConverter}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="UIElement.Opacity" Value="0.5" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>